# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Spotify {
  id: ID!
  token: String
  refreshToken: String
}

input SpotifyWhereUniqueInput {
  id: ID
}

input SpotifyWhereInput {
  AND: [SpotifyWhereInput!]
  OR: [SpotifyWhereInput!]
  NOT: [SpotifyWhereInput!]
  id: IDFilter
  token: StringFilter
  refreshToken: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input SpotifyOrderByInput {
  id: OrderDirection
  token: OrderDirection
  refreshToken: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SpotifyUpdateInput {
  token: String
  refreshToken: String
}

input SpotifyUpdateArgs {
  where: SpotifyWhereUniqueInput! = {id: 1}
  data: SpotifyUpdateInput!
}

input SpotifyCreateInput {
  token: String
  refreshToken: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  postedOn: DateTime
  slug: String
  author: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  postedOn: DateTimeNullableFilter
  slug: StringFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  postedOn: OrderDirection
  slug: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  postedOn: DateTime
  slug: String
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  postedOn: DateTime
  slug: String
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Education {
  id: ID!
  title: String
  duration: String
  location: String
  cover_image: CloudinaryImage_File
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input EducationWhereUniqueInput {
  id: ID
}

input EducationWhereInput {
  AND: [EducationWhereInput!]
  OR: [EducationWhereInput!]
  NOT: [EducationWhereInput!]
  id: IDFilter
  title: StringFilter
  duration: StringFilter
  location: StringFilter
}

input EducationOrderByInput {
  id: OrderDirection
  title: OrderDirection
  duration: OrderDirection
  location: OrderDirection
}

input EducationUpdateInput {
  title: String
  duration: String
  location: String
  cover_image: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input EducationUpdateArgs {
  where: EducationWhereUniqueInput!
  data: EducationUpdateInput!
}

input EducationCreateInput {
  title: String
  duration: String
  location: String
  cover_image: Upload
}

type Experience {
  id: ID!
  title: String
  location: String
  type: String
  duration: String
  startDate: CalendarDay
  endDate: CalendarDay
  description: String
  cover_image: CloudinaryImage_File
  technologies(where: TechnologyWhereInput! = {}, orderBy: [TechnologyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TechnologyWhereUniqueInput): [Technology!]
  technologiesCount(where: TechnologyWhereInput! = {}): Int
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ExperienceWhereUniqueInput {
  id: ID
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  NOT: [ExperienceWhereInput!]
  id: IDFilter
  title: StringFilter
  location: StringFilter
  type: StringFilter
  duration: StringFilter
  startDate: CalendarDayNullableFilter
  endDate: CalendarDayNullableFilter
  description: StringFilter
  technologies: TechnologyManyRelationFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input TechnologyManyRelationFilter {
  every: TechnologyWhereInput
  some: TechnologyWhereInput
  none: TechnologyWhereInput
}

input ExperienceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  location: OrderDirection
  type: OrderDirection
  duration: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  description: OrderDirection
}

input ExperienceUpdateInput {
  title: String
  location: String
  type: String
  duration: String
  startDate: CalendarDay
  endDate: CalendarDay
  description: String
  cover_image: Upload
  technologies: TechnologyRelateToManyForUpdateInput
}

input TechnologyRelateToManyForUpdateInput {
  disconnect: [TechnologyWhereUniqueInput!]
  set: [TechnologyWhereUniqueInput!]
  create: [TechnologyCreateInput!]
  connect: [TechnologyWhereUniqueInput!]
}

input ExperienceUpdateArgs {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateInput!
}

input ExperienceCreateInput {
  title: String
  location: String
  type: String
  duration: String
  startDate: CalendarDay
  endDate: CalendarDay
  description: String
  cover_image: Upload
  technologies: TechnologyRelateToManyForCreateInput
}

input TechnologyRelateToManyForCreateInput {
  create: [TechnologyCreateInput!]
  connect: [TechnologyWhereUniqueInput!]
}

type Technology {
  id: ID!
  name: String
  experiences(where: ExperienceWhereInput! = {}, orderBy: [ExperienceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExperienceWhereUniqueInput): [Experience!]
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  color: TechnologyColorType
}

enum TechnologyColorType {
  red
  gray
  stone
  orange
  yellow
  green
  teal
  sky
  blue
  purple
}

input TechnologyWhereUniqueInput {
  id: ID
}

input TechnologyWhereInput {
  AND: [TechnologyWhereInput!]
  OR: [TechnologyWhereInput!]
  NOT: [TechnologyWhereInput!]
  id: IDFilter
  name: StringFilter
  experiences: ExperienceManyRelationFilter
  color: TechnologyColorTypeNullableFilter
}

input ExperienceManyRelationFilter {
  every: ExperienceWhereInput
  some: ExperienceWhereInput
  none: ExperienceWhereInput
}

input TechnologyColorTypeNullableFilter {
  equals: TechnologyColorType
  in: [TechnologyColorType!]
  notIn: [TechnologyColorType!]
  not: TechnologyColorTypeNullableFilter
}

input TechnologyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  color: OrderDirection
}

input TechnologyUpdateInput {
  name: String
  experiences: ExperienceRelateToManyForUpdateInput
  color: TechnologyColorType
}

input ExperienceRelateToManyForUpdateInput {
  disconnect: [ExperienceWhereUniqueInput!]
  set: [ExperienceWhereUniqueInput!]
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

input TechnologyUpdateArgs {
  where: TechnologyWhereUniqueInput!
  data: TechnologyUpdateInput!
}

input TechnologyCreateInput {
  name: String
  experiences: ExperienceRelateToManyForCreateInput
  color: TechnologyColorType
}

input ExperienceRelateToManyForCreateInput {
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createSpotify(data: SpotifyCreateInput!): Spotify
  createSpotifies(data: [SpotifyCreateInput!]!): [Spotify]
  updateSpotify(where: SpotifyWhereUniqueInput! = {id: 1}, data: SpotifyUpdateInput!): Spotify
  updateSpotifies(data: [SpotifyUpdateArgs!]!): [Spotify]
  deleteSpotify(where: SpotifyWhereUniqueInput! = {id: 1}): Spotify
  deleteSpotifies(where: [SpotifyWhereUniqueInput!]!): [Spotify]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createEducation(data: EducationCreateInput!): Education
  createEducations(data: [EducationCreateInput!]!): [Education]
  updateEducation(where: EducationWhereUniqueInput!, data: EducationUpdateInput!): Education
  updateEducations(data: [EducationUpdateArgs!]!): [Education]
  deleteEducation(where: EducationWhereUniqueInput!): Education
  deleteEducations(where: [EducationWhereUniqueInput!]!): [Education]
  createExperience(data: ExperienceCreateInput!): Experience
  createExperiences(data: [ExperienceCreateInput!]!): [Experience]
  updateExperience(where: ExperienceWhereUniqueInput!, data: ExperienceUpdateInput!): Experience
  updateExperiences(data: [ExperienceUpdateArgs!]!): [Experience]
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteExperiences(where: [ExperienceWhereUniqueInput!]!): [Experience]
  createTechnology(data: TechnologyCreateInput!): Technology
  createTechnologies(data: [TechnologyCreateInput!]!): [Technology]
  updateTechnology(where: TechnologyWhereUniqueInput!, data: TechnologyUpdateInput!): Technology
  updateTechnologies(data: [TechnologyUpdateArgs!]!): [Technology]
  deleteTechnology(where: TechnologyWhereUniqueInput!): Technology
  deleteTechnologies(where: [TechnologyWhereUniqueInput!]!): [Technology]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  spotifies(where: SpotifyWhereInput! = {id: {equals: 1}}, orderBy: [SpotifyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SpotifyWhereUniqueInput): [Spotify!]
  spotify(where: SpotifyWhereUniqueInput! = {id: 1}): Spotify
  spotifiesCount(where: SpotifyWhereInput! = {id: {equals: 1}}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  educations(where: EducationWhereInput! = {}, orderBy: [EducationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EducationWhereUniqueInput): [Education!]
  education(where: EducationWhereUniqueInput!): Education
  educationsCount(where: EducationWhereInput! = {}): Int
  experiences(where: ExperienceWhereInput! = {}, orderBy: [ExperienceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExperienceWhereUniqueInput): [Experience!]
  experience(where: ExperienceWhereUniqueInput!): Experience
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  technologies(where: TechnologyWhereInput! = {}, orderBy: [TechnologyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TechnologyWhereUniqueInput): [Technology!]
  technology(where: TechnologyWhereUniqueInput!): Technology
  technologiesCount(where: TechnologyWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
